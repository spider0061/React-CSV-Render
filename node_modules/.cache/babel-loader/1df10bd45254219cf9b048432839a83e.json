{"ast":null,"code":"var _jsxFileName = \"/Users/ashu/Desktop/my-app/src/DataList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport * as XLSX from 'xlsx';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.css';\nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport filterFactory, { textFilter, multiSelectFilter } from 'react-bootstrap-table2-filter';\nimport 'react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DataList() {\n  _s();\n\n  const accountTypeOptions = {\n    0: 'Type1',\n    1: 'Type2',\n    2: 'Type3'\n  };\n  const statusOptions = {\n    0: 'Processing',\n    1: 'Onboarded'\n  };\n  const columns = [{\n    dataField: 'name',\n    text: 'Name',\n    sort: true,\n    filter: textFilter()\n  }, {\n    dataField: 'accounttype',\n    text: 'Account Type',\n    formatter: cell => accountTypeOptions[cell],\n    filter: multiSelectFilter({\n      options: accountTypeOptions\n    })\n  }, {\n    dataField: 'chargecode',\n    text: 'Charge Code',\n    formatter: cell => statusOptions[cell],\n    filter: multiSelectFilter({\n      options: statusOptions\n    })\n  }, {\n    dataField: 'status',\n    text: 'Status'\n  }, {\n    dataField: 'code',\n    text: 'Code'\n  }];\n  const pagination = paginationFactory({\n    page: 1,\n    sizePerPage: 20,\n    lastPageText: '>>',\n    firstPageText: '<<',\n    nextPageText: '>',\n    prePageText: '<',\n    showTotal: true,\n    alwaysShowAllBtns: true,\n    onPageChange: function (page, sizePerPage) {\n      console.log('page', page);\n      console.log('sizeperpage', sizePerPage);\n    },\n    onSizePerPageChange: function (page, sizePerPage) {\n      console.log('page', page);\n      console.log('sizeperpage', sizePerPage);\n    }\n  });\n  const [data, setData] = useState([]); // const [columns, setColumns] = useState([]);\n  // process CSV data\n\n  const processData = dataString => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n    const list = [];\n\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n      if (headers && row.length == headers.length) {\n        const obj = {};\n\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n\n          if (d.length > 0) {\n            if (d[0] == '\"') d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] == '\"') d = d.substring(d.length - 2, 1);\n          }\n\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        } // remove the blank rows\n\n\n        if (Object.values(obj).filter(x => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    } // prepare columns list from headers\n    //   const columns = headers.map(c => ({\n    //     name: c,\n    //     selector: c,\n    //   }));\n\n\n    setData(list); //   setColumns(columns);\n  }; // handle file upload\n\n\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = evt => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, {\n        type: 'binary'\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_csv(ws, {\n        header: 1\n      });\n      processData(data);\n    };\n\n    reader.readAsBinaryString(file);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \" This is data from CSV file. \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv,.xlsx,.xls\",\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(BootstrapTable, {\n      bootstrap4: true,\n      keyField: \"name\",\n      columns: columns,\n      data: data,\n      pagination: pagination,\n      filter: filterFactory()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 7\n  }, this);\n}\n\n_s(DataList, \"hhQqYsxLIv1exGOzUvDGOVv6fXw=\");\n\n_c = DataList;\nexport default DataList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataList\");","map":{"version":3,"sources":["/Users/ashu/Desktop/my-app/src/DataList.js"],"names":["React","useState","useEffect","XLSX","BootstrapTable","paginationFactory","filterFactory","textFilter","multiSelectFilter","DataList","accountTypeOptions","statusOptions","columns","dataField","text","sort","filter","formatter","cell","options","pagination","page","sizePerPage","lastPageText","firstPageText","nextPageText","prePageText","showTotal","alwaysShowAllBtns","onPageChange","console","log","onSizePerPageChange","data","setData","processData","dataString","dataStringLines","split","headers","list","i","length","row","obj","j","d","substring","Object","values","x","push","handleFileUpload","e","file","target","files","reader","FileReader","onload","evt","bstr","result","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_csv","header","readAsBinaryString"],"mappings":"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","sourcesContent":["import React , {useState, useEffect } from 'react';\nimport * as XLSX from 'xlsx';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.css' \nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css' \nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport filterFactory, {textFilter, multiSelectFilter} from 'react-bootstrap-table2-filter';\nimport 'react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css' \n\n function DataList() {\n\n\n    const accountTypeOptions = {\n        0: 'Type1',\n        1: 'Type2',\n        2: 'Type3'\n    };\n\n    const statusOptions = {\n        0: 'Processing',\n        1: 'Onboarded'\n    };\n\n    const columns= [\n        {dataField:'name',text:'Name', sort:true ,filter: textFilter()},\n        {dataField:'accounttype',text:'Account Type',formatter: cell => accountTypeOptions[cell], filter: multiSelectFilter({ options: accountTypeOptions})},\n        {dataField:'chargecode',text:'Charge Code',formatter: cell => statusOptions[cell], filter: multiSelectFilter({ options: statusOptions})},\n        {dataField:'status',text:'Status'},\n        {dataField:'code',text:'Code'},\n    ]\n\n    const pagination = paginationFactory ( {\n        page: 1,\n        sizePerPage: 20,\n        lastPageText: '>>',\n        firstPageText: '<<',\n        nextPageText: '>',\n        prePageText: '<',\n        showTotal: true,\n        alwaysShowAllBtns: true,\n        onPageChange: function (page, sizePerPage) {\n            console.log('page',page);\n            console.log('sizeperpage',sizePerPage);\n        },\n        onSizePerPageChange: function (page, sizePerPage) {\n            console.log('page',page);\n            console.log('sizeperpage',sizePerPage);\n        } \n    });\n\n\n    const [data, setData] = useState([]);\n    // const [columns, setColumns] = useState([]);\n\n  \n    // process CSV data\n    const processData = dataString => {\n      const dataStringLines = dataString.split(/\\r\\n|\\n/);\n      const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n      \n      const list = [];\n      for (let i = 1; i < dataStringLines.length; i++) {\n        const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n        if (headers && row.length == headers.length) {\n          const obj = {};\n          for (let j = 0; j < headers.length; j++) {\n            let d = row[j];\n            if (d.length > 0) {\n              if (d[0] == '\"')\n                d = d.substring(1, d.length - 1);\n              if (d[d.length - 1] == '\"')\n                d = d.substring(d.length - 2, 1);\n            }\n            if (headers[j]) {\n              obj[headers[j]] = d;\n            }\n          }\n  \n          // remove the blank rows\n          if (Object.values(obj).filter(x => x).length > 0) {\n            list.push(obj);\n          }\n        }\n      }\n      \n      // prepare columns list from headers\n    //   const columns = headers.map(c => ({\n    //     name: c,\n    //     selector: c,\n    //   }));\n  \n      setData(list);\n    //   setColumns(columns);\n    }\n  \n    // handle file upload\n    const handleFileUpload = e => {\n      const file = e.target.files[0];\n      const reader = new FileReader();\n      reader.onload = (evt) => {\n        /* Parse data */\n        const bstr = evt.target.result;\n        const wb = XLSX.read(bstr, { type: 'binary' });\n        /* Get first worksheet */\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n        const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n        processData(data);\n      };\n      reader.readAsBinaryString(file);\n    }\n  \n    return (\n      <div>\n        <h3> This is data from CSV file. </h3>\n        \n        <input\n          type=\"file\"\n          accept=\".csv,.xlsx,.xls\"\n          onChange={handleFileUpload}\n        />\n        \n        {/* <DataTable\n          pagination\n          highlightOnHover\n          columns={columns}\n          data={data}\n        /> */}\n\n        {/* <table>\n            <tr>\n                <th>Name</th>\n                <th>Account Type</th>\n                <th>Charge Code</th>\n                <th>Status</th>\n                <th>Code</th>\n            </tr>\n            {\n                data && data.length>0 ?\n                data.map( dat =>\n                    <tr> \n                        <td>{dat.name}</td>   \n                        <td>{dat.accounttype}</td>   \n                        <td>{dat.chargecode}</td>   \n                        <td>{dat.status}</td>      \n                        <td>{dat.code}</td>    \n                    </tr>\n                )\n                : 'Loading' \n            }\n        </table> */}\n        <BootstrapTable \n            bootstrap4\n            keyField='name' \n            columns={columns} \n            data={data} \n            pagination={pagination}\n            filter= {filterFactory()}\n        />\n\n      </div>\n    );\n\n }\n export default DataList;"]},"metadata":{},"sourceType":"module"}